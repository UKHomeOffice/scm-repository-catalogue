import Head from "next/head";
import {useEffect, useState} from "react";
import {get, sortBy} from "lodash";
import { filter } from "lodash";

export async function getStaticProps() {
  const res = await fetch(
    "https://ukhomeoffice.github.io/scm-repository-catalogue/repos.json"
  );
  const repos = await res.json();
  return {
    props: {
      repos
    }
  };
}

export default function Index({ repos }: { repos: any }) {
  const [filtered, setFiltered] = useState({ search: "" });
  const [sorted, setSorted] = useState({ field: 'owner', ascending: true});
  const [repositories, setRepositories] = useState(repos);

  useEffect(() => {
    const newList = filter(repos, function(r: any) {
      return r.name.toLowerCase().includes(filtered.search.toLowerCase())
        || r.description?.toLowerCase().includes(filtered.search.toLowerCase())
        || r.language?.toLowerCase().includes(filtered.search.toLowerCase())
        || r.owner.toLowerCase().includes((filtered.search.toLowerCase()));
    })

    setRepositories(newList);
  }, [filtered]);

  useEffect(() => {
    const newList = sortBy(repositories, r => get(r, sorted.field));
    if (!sorted.ascending) {
      newList.reverse();
    }

    setRepositories(newList);
  }, [sorted, repositories]);

  return (
    <>
      <Head>
        <title>Home Office GitHub Repository Catalogue</title>
        <meta name="description" content="Generated by create next app" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, viewport-fit=cover"
        />
        <meta name="theme-color" content="#0b0c0c" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <link rel="icon" href="/favicon.ico" />

        <link
          rel="shortcut icon"
          sizes="16x16 32x32 48x48"
          href="/assets/images/favicon.ico"
          type="image/x-icon"
        />
        <link
          rel="mask-icon"
          href="/assets/images/govuk-mask-icon.svg"
          color="#0b0c0c"
        />
        <link
          rel="apple-touch-icon"
          sizes="180x180"
          href="/assets/images/govuk-apple-touch-icon-180x180.png"
        />
        <link
          rel="apple-touch-icon"
          sizes="167x167"
          href="/assets/images/govuk-apple-touch-icon-167x167.png"
        />
        <link
          rel="apple-touch-icon"
          sizes="152x152"
          href="/assets/images/govuk-apple-touch-icon-152x152.png"
        />
        <link
          rel="apple-touch-icon"
          href="/assets/images/govuk-apple-touch-icon.png"
        />
      </Head>

      <h1 className={"govuk-heading-xl"}>GitHub Repository Catalogue</h1>

      {!repositories && (
        <p className={"govuk-body"}>
          LOADING... Page can take a while to render
        </p>
      )}
      {repositories && (
        <p className={"govuk-body"}>
          Currently showing {repositories.length} repositories
        </p>
      )}
      <div className="govuk-form-group">
        <label className="govuk-label">Search for repository name:</label>
        <input className="govuk-input govuk-!-width-one-third" onChange={e => { // @ts-ignore
          setFiltered({ search: e.target.value });
        }} />
      </div>

      <table className={"govuk-table"}>
        <thead className={"govuk-table__head"}>
        <tr>
          <th scope="col" className={"govuk-table__header"} onClick={() => setSorted({field: 'owner', ascending: !sorted.ascending})}>
            <a>Owner</a>{ sorted.field === 'owner' && (sorted.ascending ? "￪" : "￬")}
          </th>
          <th scope="col" className={"govuk-table__header"} onClick={() => setSorted({field: 'name', ascending: !sorted.ascending})}>
            <a>Name</a>{ sorted.field === 'name' && (sorted.ascending ? "￪" : "￬")}
          </th>
          <th scope="col" className={"govuk-table__header"} onClick={() => setSorted({field: 'description', ascending: !sorted.ascending})}>
            <a>Description</a>{ sorted.field === 'description' && (sorted.ascending ? "￪" : "￬")}
          </th>
          <th scope="col" className={"govuk-table__header"} onClick={() => setSorted({field: 'visibility', ascending: !sorted.ascending})}>
            <a>Visibility</a>{ sorted.field === 'visibility' && (sorted.ascending ? "￪" : "￬")}
          </th>
          <th scope="col" className={"govuk-table__header"}  onClick={() => setSorted({field: 'license.name', ascending: !sorted.ascending})}>
            <a>License</a>{ sorted.field === 'license.name' && (sorted.ascending ? "￪" : "￬")}
          </th>
          <th scope="col" className={"govuk-table__header"}>
            <a>Archived</a>
          </th>
          <th scope="col" className={"govuk-table__header"}  onClick={() => setSorted({field: 'language', ascending: !sorted.ascending})}>
            <a>Language</a>{ sorted.field === 'language' && (sorted.ascending ? "￪" : "￬")}
          </th>
          <th scope="col" className={"govuk-table__header"} onClick={() => setSorted({field: 'stargazersCount', ascending: !sorted.ascending})}>
            <a>Stars</a>{ sorted.field === 'stargazersCount' && (sorted.ascending ? "￪" : "￬")}
          </th>
          <th scope="col" className={"govuk-table__header"}  onClick={() => setSorted({field: 'openIssuesCount', ascending: !sorted.ascending})}>
            <a>Issues</a>{ sorted.field === 'openIssuesCount' && (sorted.ascending ? "￪" : "￬")}
          </th>
          <th scope="col" className={"govuk-table__header"}  onClick={() => setSorted({field: 'forksCount', ascending: !sorted.ascending})}>
            <a>Forks</a>{ sorted.field === 'forksCount' && (sorted.ascending ? "￪" : "￬")}
          </th>
          <th scope="col" className={"govuk-table__header"}  onClick={() => setSorted({field: 'updatedAt', ascending: !sorted.ascending})}>
            <a>Updated</a>{ sorted.field === 'updatedAt' && (sorted.ascending ? "￪" : "￬")}
          </th>
          <th scope="col" className={"govuk-table__header"}  onClick={() => setSorted({field: 'pushedAt', ascending: !sorted.ascending})}>
            <a>Pushed</a>{ sorted.field === 'pushedAt' && (sorted.ascending ? "￪" : "￬")}
          </th>
        </tr>
        </thead>
        <tbody className={"govuk-table__body"}>
        {repositories.map((repo: any) => (
          <tr key={repo.url} className={"govuk-table__row"}>
            <td className={"govuk-table__cell"}>
              <a href={`https://github.com/${repo.owner}`}>{repo.owner}</a>
            </td>
            <td className={"govuk-table__cell"}>
              <a href={`${repo.url}`}>{repo.name}</a>
            </td>
            <td className={"govuk-table__cell"}>{repo.description}</td>
            <td className={"govuk-table__cell"}>{repo.visibility}</td>
            <td className={"govuk-table__cell"}>
              {repo.license && repo.license.name !== "Other" && (
                <a href={`${repo.license.url}`}>{repo.license.name}</a>
              )}
              {repo.license && repo.license.name === "Other" && (
                <a href={`${repo.url}}/blob/master/LICENSE`}>
                  {repo.license.name}
                </a>
              )}
              {!repo.license && (
                <span className={"fa fa-times"} title="NO"></span>
              )}
            </td>
            <td className={"govuk-table__cell"}>{repo.archived}</td>
            <td className={"govuk-table__cell"}>{repo.language}</td>
            <td className={"govuk-table__cell"}>{repo.stargazersCount}</td>
            <td className={"govuk-table__cell"}>{repo.openIssuesCount}</td>
            <td className={"govuk-table__cell"}>{repo.forksCount}</td>
            <td className={"govuk-table__cell"}>{repo.updatedAt}</td>
            <td className={"govuk-table__cell"}>{repo.pushedAt}</td>
          </tr>
        ))}
        </tbody>
      </table>
    </>
  );
}
